#textdomain wesnoth-gse_x_eoma

#define GSE_X_EOMA_CHECK_VERSIONS
[event]
    name=side turn 1
    id=gse_x_eoma_compare_files
    first_time_only=no
    [lua]
        code=<<
        local is_human = wesnoth.synchronize_choice(
          function()
            return { value = "yes" }
          end,
          function()
            -- Called only on the client handling the current side, if it is an AI.
            return { value = "no" }
          end)

        wml.variables["crossover_ishuman_side"..wesnoth.current.side] = is_human.value
        >>
    [/lua]
    #first human side is assumed to be host (not always correct, but good enough for comparing players' versions)
    [if]
        {VARIABLE_CONDITIONAL crossover_host_found equals no}
        [and]
            {VARIABLE_CONDITIONAL crossover_ishuman_side$side_number equals yes}
        [/and]
        [and]
            {VARIABLE_CONDITIONAL side_number not_equals $crossover_host_side}
        [/and]
        [then]
            {VARIABLE crossover_host_found yes}
            {VARIABLE crossover_host_side $side_number}
            #all players' host cfg file variables are synced with host
            [sync_variable]
                name=crossover_host_cfg_files
            [/sync_variable]
            [sync_variable]
                name=crossover_host_eoma_cfg_files
            [/sync_variable]
        [/then]
        #if side is not host but still human:
        [elseif]
            {VARIABLE_CONDITIONAL crossover_ishuman_side$side_number equals yes}
            [then]
                [store_unit]
                    [filter]
                        side=$crossover_host_side
                        canrecruit=yes
                    [/filter]
                    variable=tmp_hostleader
                [/store_unit]
                [store_unit]
                    [filter]
                        side=$side_number
                        canrecruit=yes
                    [/filter]
                    variable=tmp_currentleader
                [/store_unit]

                {VARIABLE tmp_hostleader_name $tmp_hostleader.name}
                {VARIABLE tmp_currentleader_name $tmp_currentleader.name}

                {CLEAR_VARIABLE tmp_hostleader}
                {CLEAR_VARIABLE tmp_currentleader}

                #TODO: add [unsynced]/a viewing side check, so the files are only read for current side


                [unsynced]

                [lua]
                    code=<<

                    _ = wesnoth.textdomain "wesnoth-gse_x_eoma"


                    function check_if_files_match(cfg_table,era_name,message_wml_var1,message_wml_var2)
                        local matching_list = "Matching "..era_name.." files:"
                        local non_matching_list = _"Files from "..era_name.._" that don't match:"
                        local current_file
                        --this is so tha the first item in the list doesn't have a comma before it:
                        local matching_seperator = " "
                        local non_matching_seperator = " "
                        local unsync_message = _"WARNING: "..wml.variables["tmp_currentleader_name"].._"'s "..era_name.._" files don't match with "..wml.variables["tmp_hostleader_name"].._"'s files. Make sure all players have the same version of the era, otherwise you will likely have OOS!"

                        for i in pairs(cfg_table) do
                            if filesystem.have_file(cfg_table[i].filepath) == true then
                                current_file = filesystem.read_file(cfg_table[i].filepath)
                                if current_file == cfg_table[i].contents then
                                    matching_list = matching_list..matching_seperator..cfg_table[i].filename
                                    matching_seperator = ","
                                else
                                    non_matching_list = non_matching_list..non_matching_seperator..cfg_table[i].filename
                                    non_matching_seperator = ","
                                end
                            else
                                non_matching_list = non_matching_list..non_matching_seperator..cfg_table[i].filename.._" (missing file)"
                                non_matching_seperator = ","                                
                            end
                        end
                        --matching list isn't shown, since it's only useful for testing:
                        --wesnoth.message(matching_list)
                        --only show list if at least one non-matching element is found:
                        if non_matching_seperator == "," then
                        --storing the messages in wml vars, so that they can be synchronously shown later after [sync_variable]:
                        wml.variables[message_wml_var1] = unsync_message
                        wml.variables[message_wml_var2] = non_matching_list
--                        wesnoth.message(unsync_message)
--                        wesnoth.message(non_matching_list)
                        end
                    end

--                    local debug_utils = wesnoth.require "~add-ons/1The_Great_Steppe_Era/lua/debug_utils.lua"

                    local H = wesnoth.require "helper"

                    local gse_cfg_array

                    local eoma_cfg_array

                    --code only triggers for current side:

                    if wesnoth.current.side == wesnoth.interface.get_viewing_side() then

                    gse_cfg_array = H.get_variable_array("crossover_host_cfg_files")

                    eoma_cfg_array = H.get_variable_array("crossover_host_eoma_cfg_files")

--                    debug_utils.dbms(gse_cfg_array, true, "GSE files:", true)

                    check_if_files_match(gse_cfg_array,_"Great Steppe Era","crossover_gse_message1","crossover_gse_message2")

                    check_if_files_match(eoma_cfg_array,_"Era of Magic","crossover_eoma_message1","crossover_eoma_message2")

                    end

                    >>
                [/lua]
                [/unsynced]
                [sync_variable]
                    name=crossover_gse_message1
                [/sync_variable]
                [sync_variable]
                    name=crossover_gse_message2
                [/sync_variable]
                [sync_variable]
                    name=crossover_eoma_message1
                [/sync_variable]
                [sync_variable]
                    name=crossover_eoma_message2
                [/sync_variable]
                {IF_VAR crossover_gse_message1 not_equals $emptyvar (
                [then]
                [chat]
                    speaker=_"GSE + EoMa"
                    message=$crossover_gse_message1
                [/chat]
                [/then]
                )}
                {IF_VAR crossover_gse_message2 not_equals $emptyvar (
                [then]
                [chat]
                    speaker=_"GSE + EoMa"
                    message=$crossover_gse_message2
                [/chat]
                [/then]
                )}
                {IF_VAR crossover_eoma_message1 not_equals $emptyvar (
                [then]
                [chat]
                    speaker=_"GSE + EoMa"
                    message=$crossover_eoma_message1
                [/chat]
                [/then]
                )}
                {IF_VAR crossover_eoma_message2 not_equals $emptyvar (
                [then]
                [chat]
                    speaker=_"GSE + EoMa"
                    message=$crossover_eoma_message2
                [/chat]
                [/then]
                )}
            [/then]
        [/elseif]
    [/if]
    {CLEAR_VARIABLE tmp_hostleader_name}
    {CLEAR_VARIABLE tmp_currentleader_name}
    {CLEAR_VARIABLE crossover_gse_message1}
    {CLEAR_VARIABLE crossover_gse_message2}
    {CLEAR_VARIABLE crossover_eoma_message1}
    {CLEAR_VARIABLE crossover_eoma_message2}
[/event]
#since variables are no longer needed after turn 1, clear them:
[event]
    name=turn 2
    id=gse_x_eoma_clearvars
    first_time_only=yes
    {CLEAR_VARIABLE crossover_host_cfg_files}
    {CLEAR_VARIABLE crossover_host_eoma_cfg_files}
[/event]
[event]
    name=start
    first_time_only=no
    {VARIABLE crossover_host_found no}
    {VARIABLE crossover_host_side 0}
    [unsynced]
    [lua]
        code=<<

--        function crossover_read_dir(dir_var,filepath_var,subdir_table,cfg_table)
        function crossover_read_dir(filepath_var,subdir_table,cfg_table)
            local inserted_table = {}
            local dir_var = filesystem.read_file(filepath_var)
            for i in pairs(dir_var) do
    --            debug_utils.dbms(GSE_units[i], true, "current item:", true)
                --the string check is to prevent the ndirs variable (returned from previous read_file) from being checked, as it would result in read_file function not working properly
                if type(dir_var[i]) == "string" then
                    current_readfile = filesystem.read_file(filepath_var..dir_var[i])
                    --TODO: maybe make it also count lua files as code
                    if string.find(dir_var[i],".cfg") ~= nil then
                        --fileapth is used so that the file can easily be read again later by going through the table, needed to compare files between players
                        inserted_table = {filename = dir_var[i],filepath = filepath_var..dir_var[i], contents = current_readfile}
                        table.insert(cfg_table, inserted_table)
                    else
                    --TODO: make it only add folders (add a check for no extensions, maybe by containing a dot)
                        --the "/" is added to make read_file recognize it as a folder
                        inserted_table = {dirname = dir_var[i],dirpath = filepath_var..dir_var[i].."/", contents = current_readfile}
                        table.insert(subdir_table, inserted_table)
                    end
                end
            end
        end

--        local debug_utils = wesnoth.require "~add-ons/1The_Great_Steppe_Era/lua/debug_utils.lua"

        local filepath_orig = "~add-ons/1The_Great_Steppe_Era/"

        local filepath = filepath_orig

--        local GSE_info = filesystem.read_file "~add-ons/1The_Great_Steppe_Era/".."utils/"

        local GSE_info = filesystem.read_file(filepath)

        local GSE_subdirs = {}

        local current_readfile = {}

        local current_string

        filepath = filepath_orig..GSE_info[1]

        GSE_subdirs = filesystem.read_file(filepath)

--        debug_utils.dbms(GSE_info, true, "GSE info:", true)

--        debug_utils.dbms(GSE_subdirs, true, "GSE subdirs:", true)

--        debug_utils.dbms(GSE_info[1], true, "GSE info 1:", true)

--        current_string = GSE_info[1]

--        debug_utils.dbms(current_string, true, "current string:", true)

--        wesnoth.message(current_string)

--        GSE_subdirs = filesystem.read_file "~add-ons/1The_Great_Steppe_Era/"..current_string

        filepath = filepath_orig.."units/"

--        debug_utils.dbms(filepath, true, "filepath:", true)

--        local GSE_units = filesystem.read_file(filepath)

--        debug_utils.dbms(GSE_units, true, "GSE units:", true)

        local GSE_subdirs = {}

        local GSE_subdirs2 = {}

        local GSE_cfg_files = {}

        local current_subdir

--TODO: maybe make the code check more folders, like lua

--        crossover_read_dir(GSE_units,filepath,GSE_subdirs,GSE_cfg_files)
        crossover_read_dir(filepath,GSE_subdirs,GSE_cfg_files)

        for e in pairs(GSE_subdirs) do
--            debug_utils.dbms(GSE_subdirs[e], true, "GSE subdir:", true)
            filepath = GSE_subdirs[e].dirpath
--            current_subdir = GSE_subdirs[e].contents
--            debug_utils.dbms(current_subdir, true, "GSE current subdir:", true)
--            crossover_read_dir(current_subdir,filepath,GSE_subdirs2,GSE_cfg_files)
            crossover_read_dir(filepath,GSE_subdirs2,GSE_cfg_files)
        end

        filepath = filepath_orig.."utils/"

        GSE_subdirs = {}

        crossover_read_dir(filepath,GSE_subdirs,GSE_cfg_files)

        local e2

        for e in pairs(GSE_cfg_files) do

            e2 = e - 1

            --adding the table contents to the wml variable at position "e - 1"

            wml.variables["crossover_host_cfg_files["..e2.."]"] = GSE_cfg_files[e]
        end


        local filepath_orig_eoma = "~add-ons/Era_of_Magic/"

        local filepath_eoma = filepath_orig_eoma

        filepath = filepath_orig_eoma.."units/"

--        debug_utils.dbms(filepath, true, "filepath:", true)

--        local GSE_units = filesystem.read_file(filepath)

--        debug_utils.dbms(GSE_units, true, "GSE units:", true)

        local EoMa_subdirs = {}

        local EoMa_subdirs2 = {}

        local EoMa_cfg_files = {}

        crossover_read_dir(filepath,EoMa_subdirs,EoMa_cfg_files)

        for e in pairs(EoMa_subdirs) do
            filepath_eoma = EoMa_subdirs[e].dirpath
            crossover_read_dir(filepath_eoma,EoMa_subdirs2,EoMa_cfg_files)
        end

        filepath_eoma = filepath_orig_eoma.."utils/"

        EoMa_subdirs = {}

        crossover_read_dir(filepath_eoma,EoMa_subdirs,EoMa_cfg_files)


        for e in pairs(EoMa_cfg_files) do

            e2 = e - 1

            --adding the table contents to the wml variable at position "e - 1"

            wml.variables["crossover_host_eoma_cfg_files["..e2.."]"] = EoMa_cfg_files[e]
        end


--        local GSE_version = nil

--        local GSE_version_start,GSE_version_end = string.find(GSE_info,"version="),string.find(GSE_info,"[/info]")

--        local GSE_version = string.sub(GSE_info,GSE_version_start,GSE_version_end)

--        debug_utils.dbms(GSE_version, true, "GSE version:", true)


--        wesnoth.message(GSE_version)

        >>
    [/lua]
    [/unsynced]
[/event]
#enddef

#define STEPPE_RANDOM_SIDE_EOMA TYPE
    [multiplayer_side]
        id=steppe_Random_EoMa
        name= _"Random EoMa"
        image="units/random-dice.png"
        random_faction=yes
        choices=barbarians{TYPE},darkblooded{TYPE},destroyers{TYPE},kharos{TYPE},runemasters{TYPE},skykingdom{TYPE},summoners{TYPE},tharis{TYPE}
    [/multiplayer_side]
#enddef

#define GSE_X_EOMA_FACTIONICONS
#enddef

[era]
    id=GSE_x_EoMa
#    name= _ "Default + Outlaws"
    name= _ "GSE + EoMa"
    require_era=yes
    description=_"Factions from the Great Steppe Era and Era of Magic in one era"

    {RANDOM_SIDE}
    {STEPPE_RANDOM_SIDE_GSE}#loaded from GSE utils.cfg
    {STEPPE_RANDOM_SIDE_EOMA ()}
    {~add-ons/1The_Great_Steppe_Era/factions/ogres.cfg}
    {~add-ons/1The_Great_Steppe_Era/factions/khaganate.cfg}
    {~add-ons/1The_Great_Steppe_Era/factions/hunns.cfg}
    {~add-ons/1The_Great_Steppe_Era/factions/slavs.cfg}
    {~add-ons/1The_Great_Steppe_Era/factions/mandate.cfg}
#TODO: make kingdom available in GSE + EoMa once it is reworked
#ifdef STEPPE_ENABLE_TEST_FACTIONS
    {~add-ons/1The_Great_Steppe_Era/factions/kingdom.cfg}
#endif
    {EOMA_SIDE default skykingdom}
    {EOMA_SIDE default summoners}
    {EOMA_SIDE default tharis}
    {EOMA_SIDE default kharos}
    {EOMA_SIDE default barbarians}
    {EOMA_SIDE default darkblood}
    {EOMA_SIDE default runemasters}
    {EOMA_SIDE default destroyers}
    {EOMA_EVENTS}
    {QUICK_4MP_LEADERS}
    {STEPPE_NERF_PVP_LEADERS}
    {TURNS_OVER_ADVANTAGE}
    {GREATSTEPPE_OPTIONS}
    [load_resource]
        id=GSE_resource
    [/load_resource]
    {GSE_X_EOMA_CHECK_VERSIONS}
[/era]

[era]
    id=GSE_x_EoMa_AoH
#    name= _ "Default + Outlaws"
    name= _ "GSE + EoMa (Age of Heroes)"
    require_era=yes
    description=_"Like GSE + EoMa, but leaders are lvl3, and able to recruit lvl2 units alongside lvl1 ones"

    {RANDOM_SIDE}
    {STEPPE_RANDOM_SIDE_GSE_AOH}#loaded from GSE utils.cfg
    {STEPPE_RANDOM_SIDE_EOMA _aoh}
    {~add-ons/1The_Great_Steppe_Era/factions/ogres-aoh.cfg}
    {~add-ons/1The_Great_Steppe_Era/factions/khaganate-aoh.cfg}
    {~add-ons/1The_Great_Steppe_Era/factions/hunns-aoh.cfg}
    {~add-ons/1The_Great_Steppe_Era/factions/slavs-aoh.cfg}
    {~add-ons/1The_Great_Steppe_Era/factions/mandate-aoh.cfg}
#TODO: make kingdom available in GSE + EoMa once it is reworked
#ifdef STEPPE_ENABLE_TEST_FACTIONS
    {~add-ons/1The_Great_Steppe_Era/factions/kingdom-aoh.cfg}
#endif
    {EOMA_SIDE aoh skykingdom}
    {EOMA_SIDE aoh summoners}
    {EOMA_SIDE aoh tharis}
    {EOMA_SIDE aoh kharos}
    {EOMA_SIDE aoh barbarians}
    {EOMA_SIDE aoh darkblood}
    {EOMA_SIDE aoh runemasters}
    {EOMA_SIDE aoh destroyers}
    {EOMA_EVENTS}
    {QUICK_4MP_LEADERS}
    {STEPPE_NERF_PVP_LEADERS}
    {TURNS_OVER_ADVANTAGE}
    {GREATSTEPPE_OPTIONS}
    [load_resource]
        id=GSE_resource
    [/load_resource]
    {GSE_X_EOMA_CHECK_VERSIONS}
[/era]

[era]
    id=GSE_x_EoMa_RPG
#    name= _ "Default + Outlaws"
    name= _ "GSE + EoMa (RPG)"
    require_era=yes
    description=_"Like GSE + EoMa, but the leaders are lvl1 and there is no recruitment. Good for RPG scenarios"

    {RANDOM_SIDE}
    {STEPPE_RANDOM_SIDE_GSE_RPG}#loaded from GSE utils.cfg
    {STEPPE_RANDOM_SIDE_EOMA _rpg}
    {~add-ons/1The_Great_Steppe_Era/factions/ogres-rpg.cfg}
    {~add-ons/1The_Great_Steppe_Era/factions/khaganate-rpg.cfg}
    {~add-ons/1The_Great_Steppe_Era/factions/hunns-rpg.cfg}
    {~add-ons/1The_Great_Steppe_Era/factions/slavs-rpg.cfg}
    {~add-ons/1The_Great_Steppe_Era/factions/mandate-rpg.cfg}
#TODO: make kingdom available in GSE + EoMa once it is reworked
#ifdef STEPPE_ENABLE_TEST_FACTIONS
    {~add-ons/1The_Great_Steppe_Era/factions/kingdom-rpg.cfg}
#endif
    {EOMA_SIDE mrpg skykingdom}
    {EOMA_SIDE mrpg summoners}
    {EOMA_SIDE mrpg tharis}
    {EOMA_SIDE mrpg kharos}
    {EOMA_SIDE mrpg barbarians}
    {EOMA_SIDE mrpg darkblood}
    {EOMA_SIDE mrpg runemasters}
    {EOMA_SIDE mrpg destroyers}
    {EOMA_EVENTS}
    {QUICK_4MP_LEADERS}
    {STEPPE_NERF_PVP_LEADERS}
    {TURNS_OVER_ADVANTAGE}
    {GREATSTEPPE_OPTIONS}
    [load_resource]
        id=GSE_resource
    [/load_resource]
    [event]
        name=unit placed
        id=gse_x_eoma_remove_rpg_nerfs
        first_time_only=no
        [lua]
            code=<<

            local this_unit = wesnoth.get_unit(wml.variables["unit.id"])

            local unit_newtype = nil

    
            if string.find(this_unit.type,"EoMa") ~= nil then
--                wesnoth.message("EoMa unit found")
                if string.find(this_unit.type,"_rpg") ~= nil then
--                    wesnoth.message("rpg unit found")
                    unit_newtype = string.sub(this_unit.type,0,(string.len(this_unit.type) - 4)) --string.gsub(this_unit.type,"_rpg","")
                end
            end

            if unit_newtype then
                wesnoth.fire("transform_unit", { id = wml.variables["unit.id"], transform_to = unit_newtype })
            end

            >>
        [/lua]
    [/event]
    {GSE_X_EOMA_CHECK_VERSIONS}
[/era]

#undef GSE_X_EOMA_FACTIONICONS
